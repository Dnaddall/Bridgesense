info: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[63]
      User profile is available. Using 'C:\Users\Dnadd\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/ - -
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Development
info: Microsoft.Hosting.Lifetime[0]
      Content root path: C:\MobilitySensing\server
warn: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware[3]
      Failed to determine the https port for redirect.
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint '/_Host'
info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[3]
      Route matched with {page = "/_Host", action = "", controller = ""}. Executing page /_Host
info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[107]
      Executing an implicit handler method - ModelState is Valid
info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[109]
      Executed an implicit handler method, returned result Microsoft.AspNetCore.Mvc.RazorPages.PageResult.
info: Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionInvoker[4]
      Executed page /_Host in 686.7391ms
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint '/_Host'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/ - - - 200 - text/html;+charset=utf-8 1082.5040ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_framework/aspnetcore-browser-refresh.js - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_framework/aspnetcore-browser-refresh.js - - - 200 11992 application/javascript;+charset=utf-8 9.3546ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/assets/css/styles.css - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/Radzen.Blazor.js - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_framework/blazor.server.js - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_framework/blazor.server.js was not modified
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /assets/css/styles.css was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/assets/css/styles.css - - - 304 - text/css 53.1803ms
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/Radzen.Blazor.js was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/Radzen.Blazor.js - - - 304 - application/javascript 48.1125ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_framework/blazor.server.js - - - 304 - application/javascript 95.5957ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_vs/browserLink - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/assets/css/styles-generated.css - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /assets/css/styles-generated.css was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/assets/css/styles-generated.css - - - 304 - text/css 1.8837ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/css/standard.css - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/css/standard.css was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/css/standard.css - - - 304 - text/css 1.2703ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 324.3812ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_blazor/initializers - -
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint 'Blazor initializers'
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint 'Blazor initializers'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_blazor/initializers - - - 200 - application/json;+charset=utf-8 10.2158ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Regular.woff - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/fonts/SourceSansPro-Regular.woff was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Regular.woff - - - 304 - application/font-woff 1.4983ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 POST http://localhost:5000/_blazor/negotiate?negotiateVersion=1 text/plain;charset=UTF-8 0
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint '/_blazor/negotiate'
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint '/_blazor/negotiate'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 POST http://localhost:5000/_blazor/negotiate?negotiateVersion=1 text/plain;charset=UTF-8 0 - 200 316 application/json 44.0746ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_blazor?id=Btcj1JX4JVzGeu268cAotQ - -
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]
      Executing endpoint '/_blazor'
warn: Microsoft.EntityFrameworkCore.Model.Validation[20601]
      The 'bool' property 'is_active' on entity type 'User' is configured with a database-generated default. This default will always be used for inserts when the property has the value 'false', since this is the CLR default for the 'bool' type. Consider using the nullable 'bool?' type instead, so that the default will only be used for inserts when the property value is 'null'.
warn: Microsoft.EntityFrameworkCore.Model.Validation[20601]
      The 'bool' property 'is_admin' on entity type 'User' is configured with a database-generated default. This default will always be used for inserts when the property has the value 'false', since this is the CLR default for the 'bool' type. Consider using the nullable 'bool?' type instead, so that the default will only be used for inserts when the property value is 'null'.
info: Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 6.0.0 initialized 'BridgesenseDataContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:6.0.0+025fc55189ae41e3f2b98bcbe4eb44c505653700' with options: None
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (274ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (20ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
warn: Microsoft.EntityFrameworkCore.Query[10103]
      The query uses the 'First'/'FirstOrDefault' operator without 'OrderBy' and filter operators. This may lead to unpredictable results.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      LIMIT 1
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/MaterialIcons-Regular.woff - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Bold.woff - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/fonts/MaterialIcons-Regular.woff was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/MaterialIcons-Regular.woff - - - 304 - application/font-woff 0.9593ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Semibold.woff - -
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/fonts/SourceSansPro-Semibold.woff was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Semibold.woff - - - 304 - application/font-woff 1.3882ms
info: Microsoft.AspNetCore.StaticFiles.StaticFileMiddleware[6]
      The file /_content/Radzen.Blazor/fonts/SourceSansPro-Bold.woff was not modified
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_content/Radzen.Blazor/fonts/SourceSansPro-Bold.woff - - - 304 - application/font-woff 37.9070ms
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (7ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 131
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (150ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 131
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (228ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 423
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (5ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 423
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      ORDER BY b.id
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      ORDER BY b.id DESC
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      ORDER BY b.id
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      ORDER BY b.id DESC
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.bridges AS b
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM public.bridges AS b
      ORDER BY b.id
      LIMIT @__p_1 OFFSET @__p_0
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 423
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 17
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 17
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 17
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 17
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 17
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 17
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 17
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 16
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 16
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 14
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 14
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 14
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 14
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 14
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 14
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 14
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 12
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 6
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 6
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 8
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 8
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 8
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 8
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 8
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 7
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 7
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 7
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 7
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 7
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 7
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 7
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 1
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 1
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 5
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 5
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 5
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 5
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 5
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 6
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 6
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 2
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 2
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 2
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 2
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_0 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 2
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 18
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 18
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 18
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 18
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 18
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 19
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 19
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 19
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 19
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 24
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 24
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 24
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 24
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 24
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 26
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 26
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 26
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 26
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 26
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 27
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 27
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 27
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 27
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 27
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 30
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 30
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 30
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 30
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 30
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 34
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 34
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 34
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 34
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 34
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 41
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 41
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 41
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 41
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 41
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 38
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 38
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 38
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 38
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 38
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 49
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 49
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 49
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 49
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 49
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 126
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 126
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 126
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 126
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 126
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 117
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 117
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 117
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 117
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 117
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 172
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 172
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 172
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 172
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 172
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 467
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 467
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 467
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 467
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 467
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 469
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 469
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (0ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 1
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 1
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 469
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 484
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 484
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 42
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
warn: Microsoft.EntityFrameworkCore.Query[10102]
      The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 42
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 484
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 484
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 42
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (56ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (9ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 12
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 12
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 42
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (3ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 1
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensor_event_count AS s
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.count, t.event, t.sensor_id, t.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM (
          SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type
          FROM public.sensor_event_count AS s
          WHERE s.sensor_id = 16
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      LEFT JOIN public.bridges AS b ON t.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON t.sensor_id = s0.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT COUNT(*)::INT
      FROM public.sensors AS s
      WHERE s.bridge_id = 1
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[@__p_1='?' (DbType = Int32), @__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']
      SELECT t.id, t.bridge_id, t.created_at, t.sensortype, t.udid, t.updated_at, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code
      FROM (
          SELECT s.id, s.bridge_id, s.created_at, s.sensortype, s.udid, s.updated_at
          FROM public.sensors AS s
          WHERE s.bridge_id = 1
          LIMIT @__p_1 OFFSET @__p_0
      ) AS t
      INNER JOIN public.bridges AS b ON t.bridge_id = b.id
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (81ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (2ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (1ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT s.id, s.bridge_id, s.count, s.event, s.sensor_id, s.type, b.id, b.created_at, b.isrs, b.latitude, b.longitude, b.manager, b.name, b.owner, b.updated_at, b.vild_code, s0.id, s0.bridge_id, s0.created_at, s0.sensortype, s0.udid, s0.updated_at
      FROM public.sensor_event_count AS s
      LEFT JOIN public.bridges AS b ON s.bridge_id = b.id
      LEFT JOIN public.sensors AS s0 ON s.sensor_id = s0.id
      WHERE s.sensor_id = 16
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_framework/clear-browser-cache - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[1]
      Request starting HTTP/1.1 GET http://localhost:5000/_framework/clear-browser-cache - -
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_framework/clear-browser-cache - - - 200 - - 100.1096ms
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_framework/clear-browser-cache - - - 200 - - 30.6764ms
info: Microsoft.Hosting.Lifetime[0]
      Application is shutting down...
info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]
      Executed endpoint '/_blazor'
info: Microsoft.AspNetCore.Hosting.Diagnostics[2]
      Request finished HTTP/1.1 GET http://localhost:5000/_blazor?id=Btcj1JX4JVzGeu268cAotQ - - - 101 - - 5170603.7809ms
